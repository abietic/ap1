package com.abietic.ap1.mapper;

import com.abietic.ap1.model.Sequence;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

@Mapper
public interface SequenceMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sequence_info
     *
     * @mbg.generated Fri Jul 15 15:39:34 UTC 2022
     */
    @Delete({
            "delete from sequence_info",
            "where name = #{name,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String name);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sequence_info
     *
     * @mbg.generated Fri Jul 15 15:39:34 UTC 2022
     */
    @Insert({
            "insert into sequence_info (name, current_value, ",
            "step)",
            "values (#{name,jdbcType=VARCHAR}, #{currentValue,jdbcType=INTEGER}, ",
            "#{step,jdbcType=INTEGER})"
    })
    int insert(Sequence row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sequence_info
     *
     * @mbg.generated Fri Jul 15 15:39:34 UTC 2022
     */
    @InsertProvider(type = SequenceSqlProvider.class, method = "insertSelective")
    int insertSelective(Sequence row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sequence_info
     *
     * @mbg.generated Fri Jul 15 15:39:34 UTC 2022
     */
    @Select({
            "select",
            "name, current_value, step",
            "from sequence_info",
            "where name = #{name,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "current_value", property = "currentValue", jdbcType = JdbcType.INTEGER),
            @Result(column = "step", property = "step", jdbcType = JdbcType.INTEGER)
    })
    Sequence selectByPrimaryKey(String name);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sequence_info
     *
     * @mbg.generated Fri Jul 15 15:39:34 UTC 2022
     */
    @UpdateProvider(type = SequenceSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Sequence row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sequence_info
     *
     * @mbg.generated Fri Jul 15 15:39:34 UTC 2022
     */
    @Update({
            "update sequence_info",
            "set current_value = #{currentValue,jdbcType=INTEGER},",
            "step = #{step,jdbcType=INTEGER}",
            "where name = #{name,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Sequence row);

    // 这些是手写的，暂时不知道如何自动生成
    // 与自动生成的`selectByPrimaryKey`不同的地方是，用`for
    // update`限定了select语句，它可以消除mysql由于mvcc带来的写偏斜保证不会出现重复
    @Select({
            "select",
            "name, current_value, step",
            "from sequence_info",
            "where name = #{name,jdbcType=VARCHAR} for update"
    })
    @Results({
            @Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "current_value", property = "currentValue", jdbcType = JdbcType.INTEGER),
            @Result(column = "step", property = "step", jdbcType = JdbcType.INTEGER)
    })
    Sequence getSequenceByName(String name);

    // 这里直接进行更新,用于异步更新
    @Update({
            "update sequence_info",
            "set current_value = step + current_value",
            "where name = #{name,jdbcType=VARCHAR}"
    })
    int updateSequenceByName(String name);
}